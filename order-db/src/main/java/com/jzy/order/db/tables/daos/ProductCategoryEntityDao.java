/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.ProductCategory;
import com.jzy.order.db.tables.pojos.ProductCategoryEntity;
import com.jzy.order.db.tables.records.ProductCategoryRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCategoryEntityDao extends DAOImpl<ProductCategoryRecord, ProductCategoryEntity, Long> {

    /**
     * Create a new ProductCategoryEntityDao without any configuration
     */
    public ProductCategoryEntityDao() {
        super(ProductCategory.PRODUCT_CATEGORY, ProductCategoryEntity.class);
    }

    /**
     * Create a new ProductCategoryEntityDao with an attached configuration
     */
    public ProductCategoryEntityDao(Configuration configuration) {
        super(ProductCategory.PRODUCT_CATEGORY, ProductCategoryEntity.class, configuration);
    }

    @Override
    public Long getId(ProductCategoryEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchById(Long... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ProductCategoryEntity fetchOneById(Long value) {
        return fetchOne(ProductCategory.PRODUCT_CATEGORY.ID, value);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByShopId(Long... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>category_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfCategoryName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.CATEGORY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_name IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByCategoryName(String... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.CATEGORY_NAME, values);
    }

    /**
     * Fetch records that have <code>category_desc BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfCategoryDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.CATEGORY_DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_desc IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByCategoryDesc(String... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.CATEGORY_DESC, values);
    }

    /**
     * Fetch records that have <code>priority BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfPriority(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.PRIORITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>priority IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByPriority(Integer... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.PRIORITY, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByCtime(Timestamp... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductCategoryEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(ProductCategory.PRODUCT_CATEGORY.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<ProductCategoryEntity> fetchByMtime(Timestamp... values) {
        return fetch(ProductCategory.PRODUCT_CATEGORY.MTIME, values);
    }
}
