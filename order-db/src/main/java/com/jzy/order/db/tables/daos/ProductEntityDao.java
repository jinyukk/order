/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.Product;
import com.jzy.order.db.tables.pojos.ProductEntity;
import com.jzy.order.db.tables.records.ProductRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductEntityDao extends DAOImpl<ProductRecord, ProductEntity, Long> {

    /**
     * Create a new ProductEntityDao without any configuration
     */
    public ProductEntityDao() {
        super(Product.PRODUCT, ProductEntity.class);
    }

    /**
     * Create a new ProductEntityDao with an attached configuration
     */
    public ProductEntityDao(Configuration configuration) {
        super(Product.PRODUCT, ProductEntity.class, configuration);
    }

    @Override
    public Long getId(ProductEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Product.PRODUCT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ProductEntity> fetchById(Long... values) {
        return fetch(Product.PRODUCT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ProductEntity fetchOneById(Long value) {
        return fetchOne(Product.PRODUCT.ID, value);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Product.PRODUCT.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<ProductEntity> fetchByShopId(Long... values) {
        return fetch(Product.PRODUCT.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfCategoryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Product.PRODUCT.CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    public List<ProductEntity> fetchByCategoryId(Long... values) {
        return fetch(Product.PRODUCT.CATEGORY_ID, values);
    }

    /**
     * Fetch records that have <code>product_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfProductName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.PRODUCT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_name IN (values)</code>
     */
    public List<ProductEntity> fetchByProductName(String... values) {
        return fetch(Product.PRODUCT.PRODUCT_NAME, values);
    }

    /**
     * Fetch records that have <code>product_desc BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfProductDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.PRODUCT_DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_desc IN (values)</code>
     */
    public List<ProductEntity> fetchByProductDesc(String... values) {
        return fetch(Product.PRODUCT.PRODUCT_DESC, values);
    }

    /**
     * Fetch records that have <code>product_icon BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfProductIcon(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.PRODUCT_ICON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_icon IN (values)</code>
     */
    public List<ProductEntity> fetchByProductIcon(String... values) {
        return fetch(Product.PRODUCT.PRODUCT_ICON, values);
    }

    /**
     * Fetch records that have <code>product_pic BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfProductPic(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.PRODUCT_PIC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_pic IN (values)</code>
     */
    public List<ProductEntity> fetchByProductPic(String... values) {
        return fetch(Product.PRODUCT.PRODUCT_PIC, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfPrice(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Product.PRODUCT.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<ProductEntity> fetchByPrice(Long... values) {
        return fetch(Product.PRODUCT.PRICE, values);
    }

    /**
     * Fetch records that have <code>stock BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfStock(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Product.PRODUCT.STOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stock IN (values)</code>
     */
    public List<ProductEntity> fetchByStock(Long... values) {
        return fetch(Product.PRODUCT.STOCK, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<ProductEntity> fetchByStatus(Integer... values) {
        return fetch(Product.PRODUCT.STATUS, values);
    }

    /**
     * Fetch records that have <code>sell_count_one_week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfSellCountOneWeek(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.SELL_COUNT_ONE_WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sell_count_one_week IN (values)</code>
     */
    public List<ProductEntity> fetchBySellCountOneWeek(Integer... values) {
        return fetch(Product.PRODUCT.SELL_COUNT_ONE_WEEK, values);
    }

    /**
     * Fetch records that have <code>sell_count_one_month BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfSellCountOneMonth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.SELL_COUNT_ONE_MONTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sell_count_one_month IN (values)</code>
     */
    public List<ProductEntity> fetchBySellCountOneMonth(Integer... values) {
        return fetch(Product.PRODUCT.SELL_COUNT_ONE_MONTH, values);
    }

    /**
     * Fetch records that have <code>rate_count_one_week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfRateCountOneWeek(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.RATE_COUNT_ONE_WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rate_count_one_week IN (values)</code>
     */
    public List<ProductEntity> fetchByRateCountOneWeek(Integer... values) {
        return fetch(Product.PRODUCT.RATE_COUNT_ONE_WEEK, values);
    }

    /**
     * Fetch records that have <code>rate_count_one_month BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfRateCountOneMonth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.RATE_COUNT_ONE_MONTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rate_count_one_month IN (values)</code>
     */
    public List<ProductEntity> fetchByRateCountOneMonth(Integer... values) {
        return fetch(Product.PRODUCT.RATE_COUNT_ONE_MONTH, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Product.PRODUCT.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<ProductEntity> fetchByCtime(Timestamp... values) {
        return fetch(Product.PRODUCT.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ProductEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Product.PRODUCT.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<ProductEntity> fetchByMtime(Timestamp... values) {
        return fetch(Product.PRODUCT.MTIME, values);
    }
}
