/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.Orders;
import com.jzy.order.db.tables.pojos.OrdersEntity;
import com.jzy.order.db.tables.records.OrdersRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersEntityDao extends DAOImpl<OrdersRecord, OrdersEntity, Long> {

    /**
     * Create a new OrdersEntityDao without any configuration
     */
    public OrdersEntityDao() {
        super(Orders.ORDERS, OrdersEntity.class);
    }

    /**
     * Create a new OrdersEntityDao with an attached configuration
     */
    public OrdersEntityDao(Configuration configuration) {
        super(Orders.ORDERS, OrdersEntity.class, configuration);
    }

    @Override
    public Long getId(OrdersEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Orders.ORDERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<OrdersEntity> fetchById(Long... values) {
        return fetch(Orders.ORDERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public OrdersEntity fetchOneById(Long value) {
        return fetchOne(Orders.ORDERS.ID, value);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfOrderId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<OrdersEntity> fetchByOrderId(String... values) {
        return fetch(Orders.ORDERS.ORDER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    public OrdersEntity fetchOneByOrderId(String value) {
        return fetchOne(Orders.ORDERS.ORDER_ID, value);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Orders.ORDERS.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<OrdersEntity> fetchByShopId(Long... values) {
        return fetch(Orders.ORDERS.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>uid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfUid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uid IN (values)</code>
     */
    public List<OrdersEntity> fetchByUid(String... values) {
        return fetch(Orders.ORDERS.UID, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<OrdersEntity> fetchByUserName(String... values) {
        return fetch(Orders.ORDERS.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>total_money BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfTotalMoney(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Orders.ORDERS.TOTAL_MONEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_money IN (values)</code>
     */
    public List<OrdersEntity> fetchByTotalMoney(Long... values) {
        return fetch(Orders.ORDERS.TOTAL_MONEY, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.REMARK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<OrdersEntity> fetchByRemark(String... values) {
        return fetch(Orders.ORDERS.REMARK, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Orders.ORDERS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<OrdersEntity> fetchByStatus(Integer... values) {
        return fetch(Orders.ORDERS.STATUS, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Orders.ORDERS.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<OrdersEntity> fetchByCtime(Timestamp... values) {
        return fetch(Orders.ORDERS.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrdersEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Orders.ORDERS.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<OrdersEntity> fetchByMtime(Timestamp... values) {
        return fetch(Orders.ORDERS.MTIME, values);
    }
}
