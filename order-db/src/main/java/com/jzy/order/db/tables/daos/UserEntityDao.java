/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.User;
import com.jzy.order.db.tables.pojos.UserEntity;
import com.jzy.order.db.tables.records.UserRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntityDao extends DAOImpl<UserRecord, UserEntity, Long> {

    /**
     * Create a new UserEntityDao without any configuration
     */
    public UserEntityDao() {
        super(User.USER, UserEntity.class);
    }

    /**
     * Create a new UserEntityDao with an attached configuration
     */
    public UserEntityDao(Configuration configuration) {
        super(User.USER, UserEntity.class, configuration);
    }

    @Override
    public Long getId(UserEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserEntity> fetchById(Long... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserEntity fetchOneById(Long value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>uid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfUid(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uid IN (values)</code>
     */
    public List<UserEntity> fetchByUid(String... values) {
        return fetch(User.USER.UID, values);
    }

    /**
     * Fetch a unique record that has <code>uid = value</code>
     */
    public UserEntity fetchOneByUid(String value) {
        return fetchOne(User.USER.UID, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UserEntity> fetchByPassword(String... values) {
        return fetch(User.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<UserEntity> fetchByUserName(String... values) {
        return fetch(User.USER.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>sex BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfSex(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.SEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sex IN (values)</code>
     */
    public List<UserEntity> fetchBySex(Integer... values) {
        return fetch(User.USER.SEX, values);
    }

    /**
     * Fetch records that have <code>is_admin BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfIsAdmin(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.IS_ADMIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_admin IN (values)</code>
     */
    public List<UserEntity> fetchByIsAdmin(Integer... values) {
        return fetch(User.USER.IS_ADMIN, values);
    }

    /**
     * Fetch records that have <code>manage_shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfManageShopId(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.MANAGE_SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manage_shop_id IN (values)</code>
     */
    public List<UserEntity> fetchByManageShopId(String... values) {
        return fetch(User.USER.MANAGE_SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(User.USER.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<UserEntity> fetchByCtime(Timestamp... values) {
        return fetch(User.USER.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(User.USER.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<UserEntity> fetchByMtime(Timestamp... values) {
        return fetch(User.USER.MTIME, values);
    }
}
