/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.CommentDetail;
import com.jzy.order.db.tables.pojos.CommentDetailEntity;
import com.jzy.order.db.tables.records.CommentDetailRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentDetailEntityDao extends DAOImpl<CommentDetailRecord, CommentDetailEntity, Long> {

    /**
     * Create a new CommentDetailEntityDao without any configuration
     */
    public CommentDetailEntityDao() {
        super(CommentDetail.COMMENT_DETAIL, CommentDetailEntity.class);
    }

    /**
     * Create a new CommentDetailEntityDao with an attached configuration
     */
    public CommentDetailEntityDao(Configuration configuration) {
        super(CommentDetail.COMMENT_DETAIL, CommentDetailEntity.class, configuration);
    }

    @Override
    public Long getId(CommentDetailEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CommentDetailEntity> fetchById(Long... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CommentDetailEntity fetchOneById(Long value) {
        return fetchOne(CommentDetail.COMMENT_DETAIL.ID, value);
    }

    /**
     * Fetch records that have <code>comment_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfCommentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.COMMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment_id IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByCommentId(Long... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.COMMENT_ID, values);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByShopId(Long... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfProductId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByProductId(Long... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.PRODUCT_ID, values);
    }

    /**
     * Fetch records that have <code>product_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfProductName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.PRODUCT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_name IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByProductName(String... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.PRODUCT_NAME, values);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByScore(Integer... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.SCORE, values);
    }

    /**
     * Fetch records that have <code>comment_content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfCommentContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.COMMENT_CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment_content IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByCommentContent(String... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.COMMENT_CONTENT, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByCtime(Timestamp... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentDetailEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(CommentDetail.COMMENT_DETAIL.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<CommentDetailEntity> fetchByMtime(Timestamp... values) {
        return fetch(CommentDetail.COMMENT_DETAIL.MTIME, values);
    }
}
