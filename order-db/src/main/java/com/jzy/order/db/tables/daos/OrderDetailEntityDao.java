/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.OrderDetail;
import com.jzy.order.db.tables.pojos.OrderDetailEntity;
import com.jzy.order.db.tables.records.OrderDetailRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderDetailEntityDao extends DAOImpl<OrderDetailRecord, OrderDetailEntity, Long> {

    /**
     * Create a new OrderDetailEntityDao without any configuration
     */
    public OrderDetailEntityDao() {
        super(OrderDetail.ORDER_DETAIL, OrderDetailEntity.class);
    }

    /**
     * Create a new OrderDetailEntityDao with an attached configuration
     */
    public OrderDetailEntityDao(Configuration configuration) {
        super(OrderDetail.ORDER_DETAIL, OrderDetailEntity.class, configuration);
    }

    @Override
    public Long getId(OrderDetailEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<OrderDetailEntity> fetchById(Long... values) {
        return fetch(OrderDetail.ORDER_DETAIL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public OrderDetailEntity fetchOneById(Long value) {
        return fetchOne(OrderDetail.ORDER_DETAIL.ID, value);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfOrderId(String lowerInclusive, String upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByOrderId(String... values) {
        return fetch(OrderDetail.ORDER_DETAIL.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByShopId(Long... values) {
        return fetch(OrderDetail.ORDER_DETAIL.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfProductId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByProductId(Long... values) {
        return fetch(OrderDetail.ORDER_DETAIL.PRODUCT_ID, values);
    }

    /**
     * Fetch records that have <code>product_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfProductName(String lowerInclusive, String upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.PRODUCT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_name IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByProductName(String... values) {
        return fetch(OrderDetail.ORDER_DETAIL.PRODUCT_NAME, values);
    }

    /**
     * Fetch records that have <code>product_price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfProductPrice(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.PRODUCT_PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_price IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByProductPrice(Long... values) {
        return fetch(OrderDetail.ORDER_DETAIL.PRODUCT_PRICE, values);
    }

    /**
     * Fetch records that have <code>product_quantity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfProductQuantity(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.PRODUCT_QUANTITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_quantity IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByProductQuantity(Integer... values) {
        return fetch(OrderDetail.ORDER_DETAIL.PRODUCT_QUANTITY, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByCtime(Timestamp... values) {
        return fetch(OrderDetail.ORDER_DETAIL.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<OrderDetailEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(OrderDetail.ORDER_DETAIL.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<OrderDetailEntity> fetchByMtime(Timestamp... values) {
        return fetch(OrderDetail.ORDER_DETAIL.MTIME, values);
    }
}
