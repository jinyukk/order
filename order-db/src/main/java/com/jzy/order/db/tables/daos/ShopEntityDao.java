/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.Shop;
import com.jzy.order.db.tables.pojos.ShopEntity;
import com.jzy.order.db.tables.records.ShopRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopEntityDao extends DAOImpl<ShopRecord, ShopEntity, Long> {

    /**
     * Create a new ShopEntityDao without any configuration
     */
    public ShopEntityDao() {
        super(Shop.SHOP, ShopEntity.class);
    }

    /**
     * Create a new ShopEntityDao with an attached configuration
     */
    public ShopEntityDao(Configuration configuration) {
        super(Shop.SHOP, ShopEntity.class, configuration);
    }

    @Override
    public Long getId(ShopEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Shop.SHOP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ShopEntity> fetchById(Long... values) {
        return fetch(Shop.SHOP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ShopEntity fetchOneById(Long value) {
        return fetchOne(Shop.SHOP.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ShopEntity> fetchByName(String... values) {
        return fetch(Shop.SHOP.NAME, values);
    }

    /**
     * Fetch records that have <code>brief_desc BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfBriefDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.BRIEF_DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>brief_desc IN (values)</code>
     */
    public List<ShopEntity> fetchByBriefDesc(String... values) {
        return fetch(Shop.SHOP.BRIEF_DESC, values);
    }

    /**
     * Fetch records that have <code>all_score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfAllScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Shop.SHOP.ALL_SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>all_score IN (values)</code>
     */
    public List<ShopEntity> fetchByAllScore(Integer... values) {
        return fetch(Shop.SHOP.ALL_SCORE, values);
    }

    /**
     * Fetch records that have <code>product_score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfProductScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Shop.SHOP.PRODUCT_SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_score IN (values)</code>
     */
    public List<ShopEntity> fetchByProductScore(Integer... values) {
        return fetch(Shop.SHOP.PRODUCT_SCORE, values);
    }

    /**
     * Fetch records that have <code>service_score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfServiceScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Shop.SHOP.SERVICE_SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>service_score IN (values)</code>
     */
    public List<ShopEntity> fetchByServiceScore(Integer... values) {
        return fetch(Shop.SHOP.SERVICE_SCORE, values);
    }

    /**
     * Fetch records that have <code>sell_count_one_month BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfSellCountOneMonth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Shop.SHOP.SELL_COUNT_ONE_MONTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sell_count_one_month IN (values)</code>
     */
    public List<ShopEntity> fetchBySellCountOneMonth(Integer... values) {
        return fetch(Shop.SHOP.SELL_COUNT_ONE_MONTH, values);
    }

    /**
     * Fetch records that have <code>rate_count_one_month BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfRateCountOneMonth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Shop.SHOP.RATE_COUNT_ONE_MONTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rate_count_one_month IN (values)</code>
     */
    public List<ShopEntity> fetchByRateCountOneMonth(Integer... values) {
        return fetch(Shop.SHOP.RATE_COUNT_ONE_MONTH, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<ShopEntity> fetchByAvatar(String... values) {
        return fetch(Shop.SHOP.AVATAR, values);
    }

    /**
     * Fetch records that have <code>pictures BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfPictures(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.PICTURES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pictures IN (values)</code>
     */
    public List<ShopEntity> fetchByPictures(String... values) {
        return fetch(Shop.SHOP.PICTURES, values);
    }

    /**
     * Fetch records that have <code>tags BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfTags(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.TAGS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tags IN (values)</code>
     */
    public List<ShopEntity> fetchByTags(String... values) {
        return fetch(Shop.SHOP.TAGS, values);
    }

    /**
     * Fetch records that have <code>bulletin BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfBulletin(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.BULLETIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bulletin IN (values)</code>
     */
    public List<ShopEntity> fetchByBulletin(String... values) {
        return fetch(Shop.SHOP.BULLETIN, values);
    }

    /**
     * Fetch records that have <code>infos BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfInfos(String lowerInclusive, String upperInclusive) {
        return fetchRange(Shop.SHOP.INFOS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>infos IN (values)</code>
     */
    public List<ShopEntity> fetchByInfos(String... values) {
        return fetch(Shop.SHOP.INFOS, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Shop.SHOP.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<ShopEntity> fetchByCtime(Timestamp... values) {
        return fetch(Shop.SHOP.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ShopEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Shop.SHOP.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<ShopEntity> fetchByMtime(Timestamp... values) {
        return fetch(Shop.SHOP.MTIME, values);
    }
}
