/*
 * This file is generated by jOOQ.
 */
package com.jzy.order.db.tables.daos;


import com.jzy.order.db.tables.Comment;
import com.jzy.order.db.tables.pojos.CommentEntity;
import com.jzy.order.db.tables.records.CommentRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentEntityDao extends DAOImpl<CommentRecord, CommentEntity, Long> {

    /**
     * Create a new CommentEntityDao without any configuration
     */
    public CommentEntityDao() {
        super(Comment.COMMENT, CommentEntity.class);
    }

    /**
     * Create a new CommentEntityDao with an attached configuration
     */
    public CommentEntityDao(Configuration configuration) {
        super(Comment.COMMENT, CommentEntity.class, configuration);
    }

    @Override
    public Long getId(CommentEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CommentEntity> fetchById(Long... values) {
        return fetch(Comment.COMMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CommentEntity fetchOneById(Long value) {
        return fetchOne(Comment.COMMENT.ID, value);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfOrderId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Comment.COMMENT.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<CommentEntity> fetchByOrderId(String... values) {
        return fetch(Comment.COMMENT.ORDER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    public CommentEntity fetchOneByOrderId(String value) {
        return fetchOne(Comment.COMMENT.ORDER_ID, value);
    }

    /**
     * Fetch records that have <code>shop_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfShopId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.SHOP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shop_id IN (values)</code>
     */
    public List<CommentEntity> fetchByShopId(Long... values) {
        return fetch(Comment.COMMENT.SHOP_ID, values);
    }

    /**
     * Fetch records that have <code>uid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfUid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Comment.COMMENT.UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uid IN (values)</code>
     */
    public List<CommentEntity> fetchByUid(String... values) {
        return fetch(Comment.COMMENT.UID, values);
    }

    /**
     * Fetch records that have <code>all_score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfAllScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Comment.COMMENT.ALL_SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>all_score IN (values)</code>
     */
    public List<CommentEntity> fetchByAllScore(Integer... values) {
        return fetch(Comment.COMMENT.ALL_SCORE, values);
    }

    /**
     * Fetch records that have <code>brief_comment BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfBriefComment(String lowerInclusive, String upperInclusive) {
        return fetchRange(Comment.COMMENT.BRIEF_COMMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>brief_comment IN (values)</code>
     */
    public List<CommentEntity> fetchByBriefComment(String... values) {
        return fetch(Comment.COMMENT.BRIEF_COMMENT, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfCtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Comment.COMMENT.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<CommentEntity> fetchByCtime(Timestamp... values) {
        return fetch(Comment.COMMENT.CTIME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<CommentEntity> fetchRangeOfMtime(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Comment.COMMENT.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<CommentEntity> fetchByMtime(Timestamp... values) {
        return fetch(Comment.COMMENT.MTIME, values);
    }
}
